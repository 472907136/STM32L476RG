/**************************************************************************/
/*!
    @file     ADXL345_Haeder.h
    @author   Lucien


    The ADXL345 is a digital accelerometer with 13-bit resolution, capable
    of measuring up to +/-16g.  This driver communicate using I2C or SPI

    This is a library for the Adafruit ADXL345 breakout
    ----> https://www.adafruit.com/products/1231

    @section license License
    BSD (see license.txt)

    @section  HISTORY

    v1.0 - First release
*/
/**************************************************************************/
#include <stm32l4xx.h> // contains types

#ifndef STM32Lxx_ADXL345_h
#define STM32Lxx_ADXL345_h


/*=========================================================================
    I2C ADDRESS/BITS
    -----------------------------------------------------------------------*/
#define ADXL345_ADDRESS (0xA6) // Assumes ALT address pin grouded
/*=========================================================================*/

/*=========================================================================
    REGISTERS
    -----------------------------------------------------------------------*/
#define ADXL345_REG_DEVID 					(0x00)  // Device ID
#define ADXL345_REG_THRESH_TAP			(0x1D)  // Tap threshold
#define ADXL345_REG_OFSX						(0x1E)  // X-axis offset
#define ADXL345_REG_OFSY						(0x1F)  // Y-axis offset
#define ADXL345_REG_OFSZ						(0x20)  // Z-axis offset
#define ADXL345_REG_DUR							(0x21)  // Tap duration
#define ADXL345_REG_LATENT					(0x22)  // Tap latency
#define ADXL345_REG_WINDOW					(0x23)  // Tap window
#define ADXL345_REG_THRESH_ACT			(0x24)  // Activity threshold
#define ADXL345_REG_THRESH_INACT		(0x25)  // Inactivity threshold
#define ADXL345_REG_TIME_INACT			(0x26)  // Inactivity time
#define ADXL345_REG_ACT_INACT_CTL 	(0x27)  // Axis enable control for activity and inactivity detection
#define ADXL345_REG_THRESH_FF				(0x28)  // Free-fall threshold
#define ADXL345_REG_TIME_FF					(0x29)  // Free-fall time
#define ADXL345_REG_TAP_AXES				(0x2A)  // Axis control for single/double tap
#define ADXL345_REG_ACT_TAP_STATUS	(0x2B)  // Source for single/double tap
#define ADXL345_REG_BW_RATE					(0x2C)  // Data rate and power mode control
#define ADXL345_REG_POWER_CTL				(0x2D)  // Power-saving features control
#define ADXL345_REG_INT_ENABLE			(0x2E)  // Interrupt enable control
#define ADXL345_REG_INT_MAP					(0x2F)  // Interrupt mapping control
#define ADXL345_REG_INT_SOURCE			(0x30)  // Source of interrupts
#define ADXL345_REG_DATA_FORMAT			(0x31)  // Data format control
#define ADXL345_REG_DATAX0					(0x32)  // X-axis data 0
#define ADXL345_REG_DATAX1					(0x33)  // X-axis data 1
#define ADXL345_REG_DATAY0					(0x34)  // Y-axis data 0
#define ADXL345_REG_DATAY1					(0x35)  // Y-axis data 1
#define ADXL345_REG_DATAZ0					(0x36)  // Z-axis data 0
#define ADXL345_REG_DATAZ1					(0x37)  // Z-axis data 1
#define ADXL345_REG_FIFO_CTL				(0x38)  // FIFO control
#define ADXL345_REG_FIFO_STATUS			(0x39)  // FIFO status
/*=========================================================================*/

/*========================== DEFINE =======================================*/
/**
 * @brief 
*/
#define ADXL345_MG2G_MULTIPLIER (0.004) // 4mg per lsb

/**
 * @brief Device name
*/
#define DEV_NAME "ADXL345"
/*============================= TYPEDEF ===================================*/
/**
 * @brief Used with register 0x2C (ADXL345_REG_BW_RATE) to set bandwidth
*/
typedef enum {
  ADXL345_DATARATE_3200_HZ = 0x0F, // 1600Hz Bandwidth   140?A IDD
  ADXL345_DATARATE_1600_HZ = 0x0E, //  800Hz Bandwidth    90?A IDD
  ADXL345_DATARATE_800_HZ  = 0x0D, //  400Hz Bandwidth   140?A IDD
  ADXL345_DATARATE_400_HZ  = 0x0C, //  200Hz Bandwidth   140?A IDD
  ADXL345_DATARATE_200_HZ  = 0x0B, //  100Hz Bandwidth   140?A IDD
  ADXL345_DATARATE_100_HZ  = 0x0A, //   50Hz Bandwidth   140?A IDD
  ADXL345_DATARATE_50_HZ   = 0x09, //   25Hz Bandwidth    90?A IDD
  ADXL345_DATARATE_25_HZ   = 0x08, // 12.5Hz Bandwidth    60?A IDD
  ADXL345_DATARATE_12_5_HZ = 0x07, // 6.25Hz Bandwidth    50?A IDD
  ADXL345_DATARATE_6_25HZ  = 0x06, // 3.13Hz Bandwidth    45?A IDD
  ADXL345_DATARATE_3_13_HZ = 0x05, // 1.56Hz Bandwidth    40?A IDD
  ADXL345_DATARATE_1_56_HZ = 0x04, // 0.78Hz Bandwidth    34?A IDD
  ADXL345_DATARATE_0_78_HZ = 0x03, // 0.39Hz Bandwidth    23?A IDD
  ADXL345_DATARATE_0_39_HZ = 0x02, // 0.20Hz Bandwidth    23?A IDD
  ADXL345_DATARATE_0_20_HZ = 0x01, // 0.10Hz Bandwidth    23?A IDD
  ADXL345_DATARATE_0_10_HZ = 0x00  // 0.05Hz Bandwidth    23?A IDD (default value)
} dataRate_t;

/**
  * @brief  ADXL345 Status enum definition (is used as HAL_StatusTypeDef)
  * HAL_OK = 0x00, HAL_ERROR = 0x01, HAL_BUSY = 0x02, HAL_TIMEOUT = 0x03
  */
typedef HAL_StatusTypeDef ADXL345_StatusTypeDef;
/**
 * @brief  Used when register must be set
 *
 */
typedef enum {
  X_AXIS = 0x00, 
  Y_AXIS = 0x01,
  Z_AXIS = 0x02
} three_axis;
/**
 * @brief  Used with register 0x31 (ADXL345_REG_DATA_FORMAT) to set g range
 *
 */
typedef enum {
  ADXL345_RANGE_16_G = 0x03, // +/- 16g
  ADXL345_RANGE_8_G  = 0x02, // +/- 8g
  ADXL345_RANGE_4_G  = 0x01, // +/- 4g
  ADXL345_RANGE_2_G  = 0x00  // +/- 2g (default value)
} range_t;
/**
 * @brief  Used to set up resolution
 */
typedef enum {
  FULL = 1,
  DEFAULT = 0
} resolution;
/**
 * @brief  write_i2c to the device
 * @param  Sensor address, register address to write_i2c, value to be written
 * @return true: success false: write_i2c failed
 */
typedef ADXL345_StatusTypeDef (*ADXL345_write)(uint8_t sensor_address, int8_t reg_address, int8_t val);
/**
 * @brief Read from the device
 * @param register address to read, pointer to stored data
 * @return true: success false: read failed
 */
typedef ADXL345_StatusTypeDef (*ADXL345_read)(uint8_t sensor_address, uint8_t reg_address, uint8_t *data, uint8_t len);
/**
 * @brief Make a delay in ms
 * @param value in ms
 */
typedef void (*ADXL345_delay)(uint32_t _delay);
/**
* @brief  sensor description and use
 *
 */
typedef struct {
	char sensor_name[8]; // name : ADXL345
	uint8_t dev_id;			 // sensor id
	range_t dev_range;   // current range
	resolution full_res;		 // When this bit is set to a value of 1, the device
											 // is in full resolution mode
	// user redefine functions ( according MCU used )
	ADXL345_write write_device; // write i2c or SPI
	ADXL345_read read_device;	  // read i2c or SPI
	ADXL345_delay ms_delay; 		// redefine delay
  /* main items of the device used to tilt/inclination calculation
	   filled with register 0x32 to 0x36 (X, Y, Z axis) and calculated */
	int x_value; // x-axis is proportional to the sine of the angle of inclination
	int y_value; // y-axis acceleration, due to the orthogonality, is proportional
							 // to the cosine of the angle of inclination
	int z_value; // z axis
	float teta1; // sin-1( x ) in radians
	float teta2; // ratio tan-1( x/y ) in radians
	float teta3; // ratio tan-1( x/y ) in radians
	float phi3;  // ratio cos-1( z / RSS(x2 + y2 + z2))
}
ADXL345_sensor;

 /*============================ API ========================================*/
/**
 * @brief API to interact with the ADXL345 accelerometer
 *
 */
/**
* @brief caculate the angle on one axis : Typically to check horizontality, motionless.
*			   To notice :
*					 - the calculated angle of inclination is accurate only when the
*         device is oriented such that the x-axis is always in the plane of gravity
*				   - Linear approximation for inclination angle between -30 and +30° is possible with
*				  a good sensibility (teta = x/126 rd)
* 			   - No ability to distinguish angles of inclination in a complete 360° arc
 */
void inclination_calculation_1axis(void);
/**
* @brief caculate the angle on two axis : Typically to move a robot, at constant speed) on a plane surface
 * x, y >0	: 0<teta<90 - x>0, y<0 : 90<teta<180 - x, y <0	: 180<teta<270 - x<0, y>0	: 270<teta<360
 *			   To notice :
 * 				  - An effective incremental sensitivity that is roughly constant.
 *					- Complete 360° Tilt Sensing
 */
void inclination_calculation_2axis(void);
/**
* @brief caculate the angle on three axis : Typically to move a robot on all directions (at constant speed)
 *
 */
void inclination_calculation_3axis(void);
/**
* @brief set offset according the precision from +-2g to +-16g
 *
 */
void setOffset(ADXL345_sensor sensor, int8_t offset, three_axis axis);
/**
	* @brief set rsolution
  *
 */
void set_resolution(ADXL345_sensor *sensor, resolution resol);
/**
	* @brief get rsolution
  *
 */
resolution get_resolution(ADXL345_sensor *sensor);
/**
* @brief set range from +-2g to +-16g
 *
 */
void setRange(range_t range);
/**
* @brief Get range (give true value only if  setrange have been used before calling)
 *
 */
range_t getRange(ADXL345_sensor *ps);

void setDataRate(dataRate_t dataRate);

dataRate_t getDataRate(void);

// bool getEvent(sensors_event_t *);

// void getSensor(sensor_t *);

ADXL345_StatusTypeDef ADXL345_begin(ADXL345_sensor *my_sensor, range_t my_range);

void  getDeviceID(ADXL345_sensor *pa);

//  int16_t read16(uint8_t reg);

//  int16_t getX(void), getY(void), getZ(void);

#endif // STM32Lxx_ADXL345_h
/**
* @brief Get X, Y, Z
 *
 */
void Accel_LectureXYZ (ADXL345_sensor *sensor);

